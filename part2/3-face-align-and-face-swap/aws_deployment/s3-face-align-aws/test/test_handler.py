#import pytest
from handler import main_handler
from requests_toolbelt import MultipartEncoder
import json
import base64

faceImg = ''


def test_handler(imdata):
    resp = main_handler({
        'headers': {'content-type': 'multipart/form-data; boundary=X-INSOMNIA-BOUNDARY'},
        'body': imdata
    }, '')
    resp_body = json.loads(resp['body'])
    print(resp['statusCode'])
    #assert resp_body['something'] == 208


if __name__ == '__main__':
    print("Running test..")
    test_handler(faceImg)